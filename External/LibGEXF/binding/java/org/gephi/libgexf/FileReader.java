/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.gephi.libgexf;

public class FileReader {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected FileReader(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(FileReader obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libgexfJNI.delete_FileReader(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public FileReader() {
    this(libgexfJNI.new_FileReader__SWIG_0(), true);
  }

  public FileReader(String filepath, FileReader.Version v) {
    this(libgexfJNI.new_FileReader__SWIG_1(filepath, v.swigValue()), true);
  }

  public FileReader(String filepath) {
    this(libgexfJNI.new_FileReader__SWIG_2(filepath), true);
  }

  public FileReader(FileReader orig) {
    this(libgexfJNI.new_FileReader__SWIG_3(FileReader.getCPtr(orig), orig), true);
  }

  public GEXF getGEXFCopy() {
    return new GEXF(libgexfJNI.FileReader_getGEXFCopy(swigCPtr, this), true);
  }

  public void init(String filepath, FileReader.Version v) {
    libgexfJNI.FileReader_init__SWIG_0(swigCPtr, this, filepath, v.swigValue());
  }

  public void init(String filepath) {
    libgexfJNI.FileReader_init__SWIG_1(swigCPtr, this, filepath);
  }

  public void slurp() {
    libgexfJNI.FileReader_slurp(swigCPtr, this);
  }

  public final static class Version {
    public final static Version _1_0 = new Version("_1_0");
    public final static Version _1_1 = new Version("_1_1");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Version swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Version.class + " with value " + swigValue);
    }

    private Version(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Version(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Version(String swigName, Version swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Version[] swigValues = { _1_0, _1_1 };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
