/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.gephi.libgexf;

public class AttributeIter extends AbstractIter {
  private long swigCPtr;

  protected AttributeIter(long cPtr, boolean cMemoryOwn) {
    super(libgexfJNI.SWIGAttributeIterUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(AttributeIter obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libgexfJNI.delete_AttributeIter(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public AttributeIter(Data d, AttributeIter.Type t) {
    this(libgexfJNI.new_AttributeIter(Data.getCPtr(d), d, t.swigValue()), true);
  }

  public AbstractIter begin() {
    long cPtr = libgexfJNI.AttributeIter_begin(swigCPtr, this);
    return (cPtr == 0) ? null : new AttributeIter(cPtr, false);
  }

  public String currentTitle() {
    return libgexfJNI.AttributeIter_currentTitle(swigCPtr, this);
  }

  public t_attr_type currentType() {
    return t_attr_type.swigToEnum(libgexfJNI.AttributeIter_currentType(swigCPtr, this));
  }

  public final static class Type {
    public final static Type NODE = new Type("NODE");
    public final static Type EDGE = new Type("EDGE");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Type swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Type.class + " with value " + swigValue);
    }

    private Type(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Type(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Type(String swigName, Type swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Type[] swigValues = { NODE, EDGE };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
