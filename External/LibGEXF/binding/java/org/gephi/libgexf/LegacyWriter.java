/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.gephi.libgexf;

public class LegacyWriter {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected LegacyWriter(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(LegacyWriter obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libgexfJNI.delete_LegacyWriter(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public LegacyWriter() {
    this(libgexfJNI.new_LegacyWriter__SWIG_0(), true);
  }

  public LegacyWriter(String filepath, GEXF gexf) {
    this(libgexfJNI.new_LegacyWriter__SWIG_1(filepath, GEXF.getCPtr(gexf), gexf), true);
  }

  public LegacyWriter(LegacyWriter orig) {
    this(libgexfJNI.new_LegacyWriter__SWIG_2(LegacyWriter.getCPtr(orig), orig), true);
  }

  public GEXF getGEXFCopy() {
    return new GEXF(libgexfJNI.LegacyWriter_getGEXFCopy(swigCPtr, this), true);
  }

  public void init(String filepath, GEXF gexf) {
    libgexfJNI.LegacyWriter_init(swigCPtr, this, filepath, GEXF.getCPtr(gexf), gexf);
  }

  public void write() {
    libgexfJNI.LegacyWriter_write(swigCPtr, this);
  }

  public final static class ElemType {
    public final static ElemType NODE = new ElemType("NODE");
    public final static ElemType EDGE = new ElemType("EDGE");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ElemType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ElemType.class + " with value " + swigValue);
    }

    private ElemType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ElemType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ElemType(String swigName, ElemType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ElemType[] swigValues = { NODE, EDGE };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
