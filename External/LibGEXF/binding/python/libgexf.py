# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libgexf', [dirname(__file__)])
        except ImportError:
            import _libgexf
            return _libgexf
        if fp is not None:
            try:
                _mod = imp.load_module('_libgexf', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libgexf = swig_import_helper()
    del swig_import_helper
else:
    import _libgexf
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import collections
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libgexf.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _libgexf.SwigPyIterator_value(self)
    def incr(self, n = 1): return _libgexf.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _libgexf.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _libgexf.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _libgexf.SwigPyIterator_equal(self, *args)
    def copy(self): return _libgexf.SwigPyIterator_copy(self)
    def next(self): return _libgexf.SwigPyIterator_next(self)
    def __next__(self): return _libgexf.SwigPyIterator___next__(self)
    def previous(self): return _libgexf.SwigPyIterator_previous(self)
    def advance(self, *args): return _libgexf.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _libgexf.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _libgexf.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _libgexf.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _libgexf.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _libgexf.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _libgexf.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _libgexf.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)
    __repr__ = _swig_repr
    def iterator(self): return _libgexf.StringSet_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libgexf.StringSet___nonzero__(self)
    def __bool__(self): return _libgexf.StringSet___bool__(self)
    def __len__(self): return _libgexf.StringSet___len__(self)
    def append(self, *args): return _libgexf.StringSet_append(self, *args)
    def __contains__(self, *args): return _libgexf.StringSet___contains__(self, *args)
    def __getitem__(self, *args): return _libgexf.StringSet___getitem__(self, *args)
    def __init__(self, *args): 
        this = _libgexf.new_StringSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _libgexf.StringSet_empty(self)
    def size(self): return _libgexf.StringSet_size(self)
    def clear(self): return _libgexf.StringSet_clear(self)
    def swap(self, *args): return _libgexf.StringSet_swap(self, *args)
    def count(self, *args): return _libgexf.StringSet_count(self, *args)
    def begin(self): return _libgexf.StringSet_begin(self)
    def end(self): return _libgexf.StringSet_end(self)
    def rbegin(self): return _libgexf.StringSet_rbegin(self)
    def rend(self): return _libgexf.StringSet_rend(self)
    def erase(self, *args): return _libgexf.StringSet_erase(self, *args)
    def find(self, *args): return _libgexf.StringSet_find(self, *args)
    def lower_bound(self, *args): return _libgexf.StringSet_lower_bound(self, *args)
    def upper_bound(self, *args): return _libgexf.StringSet_upper_bound(self, *args)
    def equal_range(self, *args): return _libgexf.StringSet_equal_range(self, *args)
    def insert(self, *args): return _libgexf.StringSet_insert(self, *args)
    __swig_destroy__ = _libgexf.delete_StringSet
    __del__ = lambda self : None;
StringSet_swigregister = _libgexf.StringSet_swigregister
StringSet_swigregister(StringSet)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _libgexf.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libgexf.StringVector___nonzero__(self)
    def __bool__(self): return _libgexf.StringVector___bool__(self)
    def __len__(self): return _libgexf.StringVector___len__(self)
    def pop(self): return _libgexf.StringVector_pop(self)
    def __getslice__(self, *args): return _libgexf.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _libgexf.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _libgexf.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _libgexf.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _libgexf.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _libgexf.StringVector___setitem__(self, *args)
    def append(self, *args): return _libgexf.StringVector_append(self, *args)
    def empty(self): return _libgexf.StringVector_empty(self)
    def size(self): return _libgexf.StringVector_size(self)
    def clear(self): return _libgexf.StringVector_clear(self)
    def swap(self, *args): return _libgexf.StringVector_swap(self, *args)
    def get_allocator(self): return _libgexf.StringVector_get_allocator(self)
    def begin(self): return _libgexf.StringVector_begin(self)
    def end(self): return _libgexf.StringVector_end(self)
    def rbegin(self): return _libgexf.StringVector_rbegin(self)
    def rend(self): return _libgexf.StringVector_rend(self)
    def pop_back(self): return _libgexf.StringVector_pop_back(self)
    def erase(self, *args): return _libgexf.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _libgexf.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _libgexf.StringVector_push_back(self, *args)
    def front(self): return _libgexf.StringVector_front(self)
    def back(self): return _libgexf.StringVector_back(self)
    def assign(self, *args): return _libgexf.StringVector_assign(self, *args)
    def resize(self, *args): return _libgexf.StringVector_resize(self, *args)
    def insert(self, *args): return _libgexf.StringVector_insert(self, *args)
    def reserve(self, *args): return _libgexf.StringVector_reserve(self, *args)
    def capacity(self): return _libgexf.StringVector_capacity(self)
    __swig_destroy__ = _libgexf.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _libgexf.StringVector_swigregister
StringVector_swigregister(StringVector)

GRAPH_UNDEF = _libgexf.GRAPH_UNDEF
GRAPH_DIRECTED = _libgexf.GRAPH_DIRECTED
GRAPH_UNDIRECTED = _libgexf.GRAPH_UNDIRECTED
GRAPH_MIXED = _libgexf.GRAPH_MIXED
EDGE_TYPE = _libgexf.EDGE_TYPE
EDGE_WEIGHT = _libgexf.EDGE_WEIGHT
EDGE_UNDEF = _libgexf.EDGE_UNDEF
EDGE_DIRECTED = _libgexf.EDGE_DIRECTED
EDGE_UNDIRECTED = _libgexf.EDGE_UNDIRECTED
EDGE_MUTUAL = _libgexf.EDGE_MUTUAL
INTEGER = _libgexf.INTEGER
DOUBLE = _libgexf.DOUBLE
FLOAT = _libgexf.FLOAT
LONG = _libgexf.LONG
BOOLEAN = _libgexf.BOOLEAN
STRING = _libgexf.STRING
LISTSTRING = _libgexf.LISTSTRING
ANYURI = _libgexf.ANYURI
class ReadLockException(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadLockException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReadLockException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgexf.new_ReadLockException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgexf.delete_ReadLockException
    __del__ = lambda self : None;
    def what(self): return _libgexf.ReadLockException_what(self)
ReadLockException_swigregister = _libgexf.ReadLockException_swigregister
ReadLockException_swigregister(ReadLockException)

class WriteLockException(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WriteLockException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WriteLockException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgexf.new_WriteLockException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgexf.delete_WriteLockException
    __del__ = lambda self : None;
    def what(self): return _libgexf.WriteLockException_what(self)
WriteLockException_swigregister = _libgexf.WriteLockException_swigregister
WriteLockException_swigregister(WriteLockException)

class FileWriterException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileWriterException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileWriterException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgexf.new_FileWriterException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgexf.delete_FileWriterException
    __del__ = lambda self : None;
    def what(self): return _libgexf.FileWriterException_what(self)
FileWriterException_swigregister = _libgexf.FileWriterException_swigregister
FileWriterException_swigregister(FileWriterException)

class FileReaderException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileReaderException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileReaderException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgexf.new_FileReaderException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgexf.delete_FileReaderException
    __del__ = lambda self : None;
    def what(self): return _libgexf.FileReaderException_what(self)
FileReaderException_swigregister = _libgexf.FileReaderException_swigregister
FileReaderException_swigregister(FileReaderException)

class GEXF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GEXF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GEXF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgexf.new_GEXF(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgexf.delete_GEXF
    __del__ = lambda self : None;
    def getUndirectedGraph(self): return _libgexf.GEXF_getUndirectedGraph(self)
    def getDirectedGraph(self): return _libgexf.GEXF_getDirectedGraph(self)
    def getData(self): return _libgexf.GEXF_getData(self)
    def getMetaData(self): return _libgexf.GEXF_getMetaData(self)
    def setGraphType(self, *args): return _libgexf.GEXF_setGraphType(self, *args)
    def getGraphType(self): return _libgexf.GEXF_getGraphType(self)
    def initGraphMode(self, *args): return _libgexf.GEXF_initGraphMode(self, *args)
    def getGraphMode(self): return _libgexf.GEXF_getGraphMode(self)
    def checkIntegrity(self): return _libgexf.GEXF_checkIntegrity(self)
    __swig_setmethods__["_graph"] = _libgexf.GEXF__graph_set
    __swig_getmethods__["_graph"] = _libgexf.GEXF__graph_get
    if _newclass:_graph = _swig_property(_libgexf.GEXF__graph_get, _libgexf.GEXF__graph_set)
    __swig_setmethods__["_type"] = _libgexf.GEXF__type_set
    __swig_getmethods__["_type"] = _libgexf.GEXF__type_get
    if _newclass:_type = _swig_property(_libgexf.GEXF__type_get, _libgexf.GEXF__type_set)
    __swig_setmethods__["_mode"] = _libgexf.GEXF__mode_set
    __swig_getmethods__["_mode"] = _libgexf.GEXF__mode_get
    if _newclass:_mode = _swig_property(_libgexf.GEXF__mode_get, _libgexf.GEXF__mode_set)
    __swig_setmethods__["_data"] = _libgexf.GEXF__data_set
    __swig_getmethods__["_data"] = _libgexf.GEXF__data_get
    if _newclass:_data = _swig_property(_libgexf.GEXF__data_get, _libgexf.GEXF__data_set)
    __swig_setmethods__["_meta"] = _libgexf.GEXF__meta_set
    __swig_getmethods__["_meta"] = _libgexf.GEXF__meta_get
    if _newclass:_meta = _swig_property(_libgexf.GEXF__meta_get, _libgexf.GEXF__meta_set)
GEXF_swigregister = _libgexf.GEXF_swigregister
GEXF_swigregister(GEXF)

class AbstractIter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractIter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractIter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def begin(self): return _libgexf.AbstractIter_begin(self)
    def hasNext(self): return _libgexf.AbstractIter_hasNext(self)
    def next(self): return _libgexf.AbstractIter_next(self)
    __swig_destroy__ = _libgexf.delete_AbstractIter
    __del__ = lambda self : None;
AbstractIter_swigregister = _libgexf.AbstractIter_swigregister
AbstractIter_swigregister(AbstractIter)

class MemoryValidator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryValidator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryValidator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libgexf.delete_MemoryValidator
    __del__ = lambda self : None;
    __swig_getmethods__["run"] = lambda x: _libgexf.MemoryValidator_run
    if _newclass:run = staticmethod(_libgexf.MemoryValidator_run)
MemoryValidator_swigregister = _libgexf.MemoryValidator_swigregister
MemoryValidator_swigregister(MemoryValidator)

def MemoryValidator_run(*args):
  return _libgexf.MemoryValidator_run(*args)
MemoryValidator_run = _libgexf.MemoryValidator_run

class FileReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileReader, name)
    __repr__ = _swig_repr
    _1_0 = _libgexf.FileReader__1_0
    _1_1 = _libgexf.FileReader__1_1
    def __init__(self, *args): 
        this = _libgexf.new_FileReader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgexf.delete_FileReader
    __del__ = lambda self : None;
    def getGEXFCopy(self): return _libgexf.FileReader_getGEXFCopy(self)
    def init(self, *args): return _libgexf.FileReader_init(self, *args)
    def slurp(self): return _libgexf.FileReader_slurp(self)
FileReader_swigregister = _libgexf.FileReader_swigregister
FileReader_swigregister(FileReader)

class AbstractParser(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractParser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractParser, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def bind(self, *args): return _libgexf.AbstractParser_bind(self, *args)
    def processNode(self, *args): return _libgexf.AbstractParser_processNode(self, *args)
    __swig_destroy__ = _libgexf.delete_AbstractParser
    __del__ = lambda self : None;
AbstractParser_swigregister = _libgexf.AbstractParser_swigregister
AbstractParser_swigregister(AbstractParser)

class GexfParser(AbstractParser):
    __swig_setmethods__ = {}
    for _s in [AbstractParser]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GexfParser, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractParser]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GexfParser, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libgexf.delete_GexfParser
    __del__ = lambda self : None;
    def processNode(self, *args): return _libgexf.GexfParser_processNode(self, *args)
GexfParser_swigregister = _libgexf.GexfParser_swigregister
GexfParser_swigregister(GexfParser)

class LegacyParser(AbstractParser):
    __swig_setmethods__ = {}
    for _s in [AbstractParser]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegacyParser, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractParser]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegacyParser, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgexf.new_LegacyParser(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgexf.delete_LegacyParser
    __del__ = lambda self : None;
LegacyParser_swigregister = _libgexf.LegacyParser_swigregister
LegacyParser_swigregister(LegacyParser)

class RngValidator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RngValidator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RngValidator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libgexf.delete_RngValidator
    __del__ = lambda self : None;
    __swig_getmethods__["run"] = lambda x: _libgexf.RngValidator_run
    if _newclass:run = staticmethod(_libgexf.RngValidator_run)
RngValidator_swigregister = _libgexf.RngValidator_swigregister
RngValidator_swigregister(RngValidator)

def RngValidator_run(*args):
  return _libgexf.RngValidator_run(*args)
RngValidator_run = _libgexf.RngValidator_run

class SchemaValidator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaValidator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaValidator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libgexf.delete_SchemaValidator
    __del__ = lambda self : None;
    __swig_getmethods__["run"] = lambda x: _libgexf.SchemaValidator_run
    if _newclass:run = staticmethod(_libgexf.SchemaValidator_run)
SchemaValidator_swigregister = _libgexf.SchemaValidator_swigregister
SchemaValidator_swigregister(SchemaValidator)

def SchemaValidator_run(*args):
  return _libgexf.SchemaValidator_run(*args)
SchemaValidator_run = _libgexf.SchemaValidator_run

class FileWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileWriter, name)
    __repr__ = _swig_repr
    NODE = _libgexf.FileWriter_NODE
    EDGE = _libgexf.FileWriter_EDGE
    def __init__(self, *args): 
        this = _libgexf.new_FileWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgexf.delete_FileWriter
    __del__ = lambda self : None;
    def getGEXFCopy(self): return _libgexf.FileWriter_getGEXFCopy(self)
    def init(self, *args): return _libgexf.FileWriter_init(self, *args)
    def write(self): return _libgexf.FileWriter_write(self)
FileWriter_swigregister = _libgexf.FileWriter_swigregister
FileWriter_swigregister(FileWriter)

class LegacyWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegacyWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LegacyWriter, name)
    __repr__ = _swig_repr
    NODE = _libgexf.LegacyWriter_NODE
    EDGE = _libgexf.LegacyWriter_EDGE
    def __init__(self, *args): 
        this = _libgexf.new_LegacyWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgexf.delete_LegacyWriter
    __del__ = lambda self : None;
    def getGEXFCopy(self): return _libgexf.LegacyWriter_getGEXFCopy(self)
    def init(self, *args): return _libgexf.LegacyWriter_init(self, *args)
    def write(self): return _libgexf.LegacyWriter_write(self)
LegacyWriter_swigregister = _libgexf.LegacyWriter_swigregister
LegacyWriter_swigregister(LegacyWriter)

class Conv(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Conv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Conv, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libgexf.delete_Conv
    __del__ = lambda self : None;
    __swig_getmethods__["xmlCharToId"] = lambda x: _libgexf.Conv_xmlCharToId
    if _newclass:xmlCharToId = staticmethod(_libgexf.Conv_xmlCharToId)
    __swig_getmethods__["strToId"] = lambda x: _libgexf.Conv_strToId
    if _newclass:strToId = staticmethod(_libgexf.Conv_strToId)
    __swig_getmethods__["xmlCharToStr"] = lambda x: _libgexf.Conv_xmlCharToStr
    if _newclass:xmlCharToStr = staticmethod(_libgexf.Conv_xmlCharToStr)
    __swig_getmethods__["xmlCharToUnsignedInt"] = lambda x: _libgexf.Conv_xmlCharToUnsignedInt
    if _newclass:xmlCharToUnsignedInt = staticmethod(_libgexf.Conv_xmlCharToUnsignedInt)
    __swig_getmethods__["xmlCharToFloat"] = lambda x: _libgexf.Conv_xmlCharToFloat
    if _newclass:xmlCharToFloat = staticmethod(_libgexf.Conv_xmlCharToFloat)
    __swig_getmethods__["idToStr"] = lambda x: _libgexf.Conv_idToStr
    if _newclass:idToStr = staticmethod(_libgexf.Conv_idToStr)
    __swig_getmethods__["unsignedIntToStr"] = lambda x: _libgexf.Conv_unsignedIntToStr
    if _newclass:unsignedIntToStr = staticmethod(_libgexf.Conv_unsignedIntToStr)
    __swig_getmethods__["floatToStr"] = lambda x: _libgexf.Conv_floatToStr
    if _newclass:floatToStr = staticmethod(_libgexf.Conv_floatToStr)
    __swig_getmethods__["strToUnsignedInt"] = lambda x: _libgexf.Conv_strToUnsignedInt
    if _newclass:strToUnsignedInt = staticmethod(_libgexf.Conv_strToUnsignedInt)
    __swig_getmethods__["edgeTypeToStr"] = lambda x: _libgexf.Conv_edgeTypeToStr
    if _newclass:edgeTypeToStr = staticmethod(_libgexf.Conv_edgeTypeToStr)
    __swig_getmethods__["attrTypeToStr"] = lambda x: _libgexf.Conv_attrTypeToStr
    if _newclass:attrTypeToStr = staticmethod(_libgexf.Conv_attrTypeToStr)
    __swig_getmethods__["isBoolean"] = lambda x: _libgexf.Conv_isBoolean
    if _newclass:isBoolean = staticmethod(_libgexf.Conv_isBoolean)
    __swig_getmethods__["isDouble"] = lambda x: _libgexf.Conv_isDouble
    if _newclass:isDouble = staticmethod(_libgexf.Conv_isDouble)
    __swig_getmethods__["isInteger"] = lambda x: _libgexf.Conv_isInteger
    if _newclass:isInteger = staticmethod(_libgexf.Conv_isInteger)
    __swig_getmethods__["isFloat"] = lambda x: _libgexf.Conv_isFloat
    if _newclass:isFloat = staticmethod(_libgexf.Conv_isFloat)
    __swig_getmethods__["isLong"] = lambda x: _libgexf.Conv_isLong
    if _newclass:isLong = staticmethod(_libgexf.Conv_isLong)
    __swig_getmethods__["isAnyURI"] = lambda x: _libgexf.Conv_isAnyURI
    if _newclass:isAnyURI = staticmethod(_libgexf.Conv_isAnyURI)
    __swig_getmethods__["tokenizer"] = lambda x: _libgexf.Conv_tokenizer
    if _newclass:tokenizer = staticmethod(_libgexf.Conv_tokenizer)
Conv_swigregister = _libgexf.Conv_swigregister
Conv_swigregister(Conv)

def Conv_xmlCharToId(*args):
  return _libgexf.Conv_xmlCharToId(*args)
Conv_xmlCharToId = _libgexf.Conv_xmlCharToId

def Conv_strToId(*args):
  return _libgexf.Conv_strToId(*args)
Conv_strToId = _libgexf.Conv_strToId

def Conv_xmlCharToStr(*args):
  return _libgexf.Conv_xmlCharToStr(*args)
Conv_xmlCharToStr = _libgexf.Conv_xmlCharToStr

def Conv_xmlCharToUnsignedInt(*args):
  return _libgexf.Conv_xmlCharToUnsignedInt(*args)
Conv_xmlCharToUnsignedInt = _libgexf.Conv_xmlCharToUnsignedInt

def Conv_xmlCharToFloat(*args):
  return _libgexf.Conv_xmlCharToFloat(*args)
Conv_xmlCharToFloat = _libgexf.Conv_xmlCharToFloat

def Conv_idToStr(*args):
  return _libgexf.Conv_idToStr(*args)
Conv_idToStr = _libgexf.Conv_idToStr

def Conv_unsignedIntToStr(*args):
  return _libgexf.Conv_unsignedIntToStr(*args)
Conv_unsignedIntToStr = _libgexf.Conv_unsignedIntToStr

def Conv_floatToStr(*args):
  return _libgexf.Conv_floatToStr(*args)
Conv_floatToStr = _libgexf.Conv_floatToStr

def Conv_strToUnsignedInt(*args):
  return _libgexf.Conv_strToUnsignedInt(*args)
Conv_strToUnsignedInt = _libgexf.Conv_strToUnsignedInt

def Conv_edgeTypeToStr(*args):
  return _libgexf.Conv_edgeTypeToStr(*args)
Conv_edgeTypeToStr = _libgexf.Conv_edgeTypeToStr

def Conv_attrTypeToStr(*args):
  return _libgexf.Conv_attrTypeToStr(*args)
Conv_attrTypeToStr = _libgexf.Conv_attrTypeToStr

def Conv_isBoolean(*args):
  return _libgexf.Conv_isBoolean(*args)
Conv_isBoolean = _libgexf.Conv_isBoolean

def Conv_isDouble(*args):
  return _libgexf.Conv_isDouble(*args)
Conv_isDouble = _libgexf.Conv_isDouble

def Conv_isInteger(*args):
  return _libgexf.Conv_isInteger(*args)
Conv_isInteger = _libgexf.Conv_isInteger

def Conv_isFloat(*args):
  return _libgexf.Conv_isFloat(*args)
Conv_isFloat = _libgexf.Conv_isFloat

def Conv_isLong(*args):
  return _libgexf.Conv_isLong(*args)
Conv_isLong = _libgexf.Conv_isLong

def Conv_isAnyURI(*args):
  return _libgexf.Conv_isAnyURI(*args)
Conv_isAnyURI = _libgexf.Conv_isAnyURI

def Conv_tokenizer(*args):
  return _libgexf.Conv_tokenizer(*args)
Conv_tokenizer = _libgexf.Conv_tokenizer

class Graph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Graph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Graph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgexf.new_Graph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgexf.delete_Graph
    __del__ = lambda self : None;
    def addNode(self, *args): return _libgexf.Graph_addNode(self, *args)
    def addEdge(self, *args): return _libgexf.Graph_addEdge(self, *args)
    def removeNode(self, *args): return _libgexf.Graph_removeNode(self, *args)
    def removeEdge(self, *args): return _libgexf.Graph_removeEdge(self, *args)
    def containsNode(self, *args): return _libgexf.Graph_containsNode(self, *args)
    def containsEdge(self, *args): return _libgexf.Graph_containsEdge(self, *args)
    def getEdge(self, *args): return _libgexf.Graph_getEdge(self, *args)
    def getNodes(self): return _libgexf.Graph_getNodes(self)
    def getEdges(self): return _libgexf.Graph_getEdges(self)
    def getNeighbors(self, *args): return _libgexf.Graph_getNeighbors(self, *args)
    def getNodeCount(self): return _libgexf.Graph_getNodeCount(self)
    def getEdgeCount(self): return _libgexf.Graph_getEdgeCount(self)
    def getDegree(self, *args): return _libgexf.Graph_getDegree(self, *args)
    def clear(self): return _libgexf.Graph_clear(self)
    def clearEdges(self, *args): return _libgexf.Graph_clearEdges(self, *args)
    def readLock(self): return _libgexf.Graph_readLock(self)
    def readUnlock(self): return _libgexf.Graph_readUnlock(self)
    def writeLock(self): return _libgexf.Graph_writeLock(self)
    def writeUnlock(self): return _libgexf.Graph_writeUnlock(self)
    def isReadLock(self): return _libgexf.Graph_isReadLock(self)
    def isWriteLock(self): return _libgexf.Graph_isWriteLock(self)
    def isUnlock(self): return _libgexf.Graph_isUnlock(self)
Graph_swigregister = _libgexf.Graph_swigregister
Graph_swigregister(Graph)

class DynamicGraph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicGraph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicGraph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgexf.new_DynamicGraph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgexf.delete_DynamicGraph
    __del__ = lambda self : None;
    def hasNodeStart(self, *args): return _libgexf.DynamicGraph_hasNodeStart(self, *args)
    def hasEdgeStart(self, *args): return _libgexf.DynamicGraph_hasEdgeStart(self, *args)
    def hasNodeEnd(self, *args): return _libgexf.DynamicGraph_hasNodeEnd(self, *args)
    def hasEdgeEnd(self, *args): return _libgexf.DynamicGraph_hasEdgeEnd(self, *args)
    def getNodeStart(self, *args): return _libgexf.DynamicGraph_getNodeStart(self, *args)
    def getEdgeStart(self, *args): return _libgexf.DynamicGraph_getEdgeStart(self, *args)
    def getNodeEnd(self, *args): return _libgexf.DynamicGraph_getNodeEnd(self, *args)
    def getEdgeEnd(self, *args): return _libgexf.DynamicGraph_getEdgeEnd(self, *args)
    def setNodeStart(self, *args): return _libgexf.DynamicGraph_setNodeStart(self, *args)
    def setEdgeStart(self, *args): return _libgexf.DynamicGraph_setEdgeStart(self, *args)
    def setNodeEnd(self, *args): return _libgexf.DynamicGraph_setNodeEnd(self, *args)
    def setEdgeEnd(self, *args): return _libgexf.DynamicGraph_setEdgeEnd(self, *args)
    def getDegree(self, *args): return _libgexf.DynamicGraph_getDegree(self, *args)
    def addNode(self, *args): return _libgexf.DynamicGraph_addNode(self, *args)
    def addEdge(self, *args): return _libgexf.DynamicGraph_addEdge(self, *args)
    def removeNode(self, *args): return _libgexf.DynamicGraph_removeNode(self, *args)
    def removeEdge(self, *args): return _libgexf.DynamicGraph_removeEdge(self, *args)
    def containsNode(self, *args): return _libgexf.DynamicGraph_containsNode(self, *args)
    def containsEdge(self, *args): return _libgexf.DynamicGraph_containsEdge(self, *args)
    def getEdge(self, *args): return _libgexf.DynamicGraph_getEdge(self, *args)
    def getNodes(self): return _libgexf.DynamicGraph_getNodes(self)
    def getEdges(self): return _libgexf.DynamicGraph_getEdges(self)
    def getNeighbors(self, *args): return _libgexf.DynamicGraph_getNeighbors(self, *args)
    def getNodeCount(self): return _libgexf.DynamicGraph_getNodeCount(self)
    def getEdgeCount(self): return _libgexf.DynamicGraph_getEdgeCount(self)
    def clearEdges(self, *args): return _libgexf.DynamicGraph_clearEdges(self, *args)
    def clear(self): return _libgexf.DynamicGraph_clear(self)
DynamicGraph_swigregister = _libgexf.DynamicGraph_swigregister
DynamicGraph_swigregister(DynamicGraph)

class DirectedGraph(Graph):
    __swig_setmethods__ = {}
    for _s in [Graph]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirectedGraph, name, value)
    __swig_getmethods__ = {}
    for _s in [Graph]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DirectedGraph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgexf.new_DirectedGraph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgexf.delete_DirectedGraph
    __del__ = lambda self : None;
    def removeInEdges(self, *args): return _libgexf.DirectedGraph_removeInEdges(self, *args)
    def removeOutEdges(self, *args): return _libgexf.DirectedGraph_removeOutEdges(self, *args)
    def getInEdges(self, *args): return _libgexf.DirectedGraph_getInEdges(self, *args)
    def getOutEdges(self, *args): return _libgexf.DirectedGraph_getOutEdges(self, *args)
    def getSuccessors(self, *args): return _libgexf.DirectedGraph_getSuccessors(self, *args)
    def getPredecessors(self, *args): return _libgexf.DirectedGraph_getPredecessors(self, *args)
    def getInDegree(self, *args): return _libgexf.DirectedGraph_getInDegree(self, *args)
    def getOutDegree(self, *args): return _libgexf.DirectedGraph_getOutDegree(self, *args)
    def isSuccessor(self, *args): return _libgexf.DirectedGraph_isSuccessor(self, *args)
    def isPredecessor(self, *args): return _libgexf.DirectedGraph_isPredecessor(self, *args)
DirectedGraph_swigregister = _libgexf.DirectedGraph_swigregister
DirectedGraph_swigregister(DirectedGraph)

class UndirectedGraph(Graph):
    __swig_setmethods__ = {}
    for _s in [Graph]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UndirectedGraph, name, value)
    __swig_getmethods__ = {}
    for _s in [Graph]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UndirectedGraph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgexf.new_UndirectedGraph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgexf.delete_UndirectedGraph
    __del__ = lambda self : None;
UndirectedGraph_swigregister = _libgexf.UndirectedGraph_swigregister
UndirectedGraph_swigregister(UndirectedGraph)

class NodeIter(AbstractIter):
    __swig_setmethods__ = {}
    for _s in [AbstractIter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeIter, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractIter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodeIter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgexf.new_NodeIter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgexf.delete_NodeIter
    __del__ = lambda self : None;
    def begin(self): return _libgexf.NodeIter_begin(self)
NodeIter_swigregister = _libgexf.NodeIter_swigregister
NodeIter_swigregister(NodeIter)

class EdgeIter(AbstractIter):
    __swig_setmethods__ = {}
    for _s in [AbstractIter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EdgeIter, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractIter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EdgeIter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgexf.new_EdgeIter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgexf.delete_EdgeIter
    __del__ = lambda self : None;
    def begin(self): return _libgexf.EdgeIter_begin(self)
    def currentSource(self): return _libgexf.EdgeIter_currentSource(self)
    def currentTarget(self): return _libgexf.EdgeIter_currentTarget(self)
    def currentProperty(self, *args): return _libgexf.EdgeIter_currentProperty(self, *args)
EdgeIter_swigregister = _libgexf.EdgeIter_swigregister
EdgeIter_swigregister(EdgeIter)

class Data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Data, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgexf.new_Data(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgexf.delete_Data
    __del__ = lambda self : None;
    def getNodeLabel(self, *args): return _libgexf.Data_getNodeLabel(self, *args)
    def hasNodeLabel(self, *args): return _libgexf.Data_hasNodeLabel(self, *args)
    def setNodeLabel(self, *args): return _libgexf.Data_setNodeLabel(self, *args)
    def getEdgeLabel(self, *args): return _libgexf.Data_getEdgeLabel(self, *args)
    def hasEdgeLabel(self, *args): return _libgexf.Data_hasEdgeLabel(self, *args)
    def setEdgeLabel(self, *args): return _libgexf.Data_setEdgeLabel(self, *args)
    def addNodeAttributeColumn(self, *args): return _libgexf.Data_addNodeAttributeColumn(self, *args)
    def addEdgeAttributeColumn(self, *args): return _libgexf.Data_addEdgeAttributeColumn(self, *args)
    def setNodeAttributeDefault(self, *args): return _libgexf.Data_setNodeAttributeDefault(self, *args)
    def setEdgeAttributeDefault(self, *args): return _libgexf.Data_setEdgeAttributeDefault(self, *args)
    def setNodeAttributeOptions(self, *args): return _libgexf.Data_setNodeAttributeOptions(self, *args)
    def setEdgeAttributeOptions(self, *args): return _libgexf.Data_setEdgeAttributeOptions(self, *args)
    def setNodeValue(self, *args): return _libgexf.Data_setNodeValue(self, *args)
    def setEdgeValue(self, *args): return _libgexf.Data_setEdgeValue(self, *args)
    def getNodeAttributeColumn(self): return _libgexf.Data_getNodeAttributeColumn(self)
    def getEdgeAttributeColumn(self): return _libgexf.Data_getEdgeAttributeColumn(self)
    def getNodeAttribute(self, *args): return _libgexf.Data_getNodeAttribute(self, *args)
    def getEdgeAttribute(self, *args): return _libgexf.Data_getEdgeAttribute(self, *args)
    def getNodeAttributeRow(self, *args): return _libgexf.Data_getNodeAttributeRow(self, *args)
    def getEdgeAttributeRow(self, *args): return _libgexf.Data_getEdgeAttributeRow(self, *args)
    def getNodeAttributeDefault(self, *args): return _libgexf.Data_getNodeAttributeDefault(self, *args)
    def getEdgeAttributeOptions(self, *args): return _libgexf.Data_getEdgeAttributeOptions(self, *args)
    def getNodeAttributeOptions(self, *args): return _libgexf.Data_getNodeAttributeOptions(self, *args)
    def getEdgeAttributeDefault(self, *args): return _libgexf.Data_getEdgeAttributeDefault(self, *args)
    def hasNodeAttributeDefault(self, *args): return _libgexf.Data_hasNodeAttributeDefault(self, *args)
    def hasEdgeAttributeDefault(self, *args): return _libgexf.Data_hasEdgeAttributeDefault(self, *args)
    def hasNodeAttributeOptions(self, *args): return _libgexf.Data_hasNodeAttributeOptions(self, *args)
    def hasEdgeAttributeOptions(self, *args): return _libgexf.Data_hasEdgeAttributeOptions(self, *args)
    def isNodeAttributeOption(self, *args): return _libgexf.Data_isNodeAttributeOption(self, *args)
    def isEdgeAttributeOption(self, *args): return _libgexf.Data_isEdgeAttributeOption(self, *args)
    def removeNodeAttributeColumn(self, *args): return _libgexf.Data_removeNodeAttributeColumn(self, *args)
    def removeEdgeAttributeColumn(self, *args): return _libgexf.Data_removeEdgeAttributeColumn(self, *args)
    def clearNodeAttributes(self, *args): return _libgexf.Data_clearNodeAttributes(self, *args)
    def clearEdgeAttributes(self, *args): return _libgexf.Data_clearEdgeAttributes(self, *args)
    def clear(self): return _libgexf.Data_clear(self)
    def clearEdgesAttributes(self): return _libgexf.Data_clearEdgesAttributes(self)
Data_swigregister = _libgexf.Data_swigregister
Data_swigregister(Data)

class MetaData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetaData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MetaData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgexf.new_MetaData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgexf.delete_MetaData
    __del__ = lambda self : None;
    def getVersion(self): return _libgexf.MetaData_getVersion(self)
    def getXmlns(self): return _libgexf.MetaData_getXmlns(self)
    def getXsi(self): return _libgexf.MetaData_getXsi(self)
    def getSchema(self): return _libgexf.MetaData_getSchema(self)
    def getVariant(self): return _libgexf.MetaData_getVariant(self)
    def getCreator(self): return _libgexf.MetaData_getCreator(self)
    def getDescription(self): return _libgexf.MetaData_getDescription(self)
    def getKeywords(self): return _libgexf.MetaData_getKeywords(self)
    def getLastModifiedDate(self): return _libgexf.MetaData_getLastModifiedDate(self)
    def setVersion(self, *args): return _libgexf.MetaData_setVersion(self, *args)
    def setXmlns(self, *args): return _libgexf.MetaData_setXmlns(self, *args)
    def setXsi(self, *args): return _libgexf.MetaData_setXsi(self, *args)
    def setSchema(self, *args): return _libgexf.MetaData_setSchema(self, *args)
    def setVariant(self, *args): return _libgexf.MetaData_setVariant(self, *args)
    def setCreator(self, *args): return _libgexf.MetaData_setCreator(self, *args)
    def setDescription(self, *args): return _libgexf.MetaData_setDescription(self, *args)
    def setKeywords(self, *args): return _libgexf.MetaData_setKeywords(self, *args)
    def setLastModifiedDate(self, *args): return _libgexf.MetaData_setLastModifiedDate(self, *args)
MetaData_swigregister = _libgexf.MetaData_swigregister
MetaData_swigregister(MetaData)

class AttributeIter(AbstractIter):
    __swig_setmethods__ = {}
    for _s in [AbstractIter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttributeIter, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractIter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AttributeIter, name)
    __repr__ = _swig_repr
    NODE = _libgexf.AttributeIter_NODE
    EDGE = _libgexf.AttributeIter_EDGE
    def __init__(self, *args): 
        this = _libgexf.new_AttributeIter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgexf.delete_AttributeIter
    __del__ = lambda self : None;
    def begin(self): return _libgexf.AttributeIter_begin(self)
    def currentTitle(self): return _libgexf.AttributeIter_currentTitle(self)
    def currentType(self): return _libgexf.AttributeIter_currentType(self)
AttributeIter_swigregister = _libgexf.AttributeIter_swigregister
AttributeIter_swigregister(AttributeIter)

class AttValueIter(AbstractIter):
    __swig_setmethods__ = {}
    for _s in [AbstractIter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttValueIter, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractIter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AttValueIter, name)
    __repr__ = _swig_repr
    NODE = _libgexf.AttValueIter_NODE
    EDGE = _libgexf.AttValueIter_EDGE
    def __init__(self, *args): 
        this = _libgexf.new_AttValueIter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgexf.delete_AttValueIter
    __del__ = lambda self : None;
    def begin(self): return _libgexf.AttValueIter_begin(self)
    def currentValue(self): return _libgexf.AttValueIter_currentValue(self)
    def currentName(self): return _libgexf.AttValueIter_currentName(self)
AttValueIter_swigregister = _libgexf.AttValueIter_swigregister
AttValueIter_swigregister(AttValueIter)



