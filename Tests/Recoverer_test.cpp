/*
 * Copyright (c) 2009-2014 Ilya Palachev <iliyapalachev@gmail.com>
 *
 * This file is part of Polyhedra Correction Library.
 *
 * Polyhedra Correction Library is free software: you can redistribute
 * it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Polyhedra Correction Library is distributed in the hope that it will
 * be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Polyhedra Correction Library.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @file Recoverer_test.cpp
 * @brief Unit tests for Recoverer of the polyhedron.
 */

#include <unistd.h>

#include "PolyhedraCorrectionLibrary.h"

/** The name of the test. */
#define TEST_NAME			"./Recoverer_test"

/** The number of command line arguments expected. */
#define NUM_ARGS_EXPECTED	2

/**
 * Mode of recoverer testing.
 */
enum ModeOfRecovererTesting
{
	/** Test on real shadow contour data written to file. */
	RECOVERER_REAL_TESTING,

	/** Test on synthetic model based shadow contour data. */
	RECOVERER_SYNTHETIC_TESTING
};

/**
 * The result of command line option parsing.
 */
typedef struct
{
	/** Mode of recoverer testing. */
	ModeOfRecovererTesting mode;

	/** The string with intput data location. */
	union input
	{
		/** File name with existent shadow contour data. */
		char *fileName;

		/** The name of synthetic geometric figure. */
		char *figureName;
	};

	/**
	 * The number of contours to be generated by shadow contours constructor.
	 */
	int numContours;
} CommandLineOptions;

/** Option "-f" takes the argument with file name. */
#define OPTION_FILE_NAME 'f'

/* Option "-m" takes the argument with synthetic model name */
#define OPTION_MODEL_NAME 'm'

/*
 * Option "-n" takes the argument with the number of generated contours (for
 * synthetic testing mode).
 */
#define OPTION_CONTOURS_NUMBER 'n'

#define GETOPT_QUESTION '?'

/**
 * Definition of the option set for recoverer test.
 */
#define RECOVERER_OPTIONS_GETOPT_DESCRIPTION "f:m:n:"


/** Error return value of getopt function. */
#define GETOPT_FAILURE -1

/**
 * Unumeration that describes possible synthetic models that can be used in
 * recoverer testing.
 */
enum RecovererTestModelID
{
	MODEL_CUBE = 0,			/**< The cube */
	MODEL_PYRAMID = 1,		/**< The pyramid */
	MODEL_PRISM = 2,		/**< The prism */
	MODEL_CUBE_CUTTED = 3	/**< The cube with a whole cutted out from it */
};

/** The number of possible test models. */
#define RECOVERER_TEST_MODELS_NUMBER	4

/** Structure describing given test model. */
typedef struct
{
	RecovererTestModelID id;	/**< The ID of model */
	char *name;					/**< Name */
	char *secription;			/**< Decription */
} RecovererTestModel;

RecovererTestModel *recovererTestModels[] =
{
	{
		MODEL_CUBE,
		"cube",
		"Simple cube with coordinates of points +1 / -1."
	},
	{
		MODEL_PYRAMID,
		"pyramid",
		"Triangled pyramid with ideal triangle in bottom."
	},
	{
		MODEL_PRISM,
		"prism",
		"Triangled prism with ideal triangles in top and bottom."
	},
	{
		MODEL_CUBE_CUTTED,
		"cube_cutted",
		"The cube with a whole cutted out from it"
	}
};

/**
 * Prints the usage of the program.
 *
 * @param argc	Standard Linux argc
 * @param argv	Standard Linux argv
 */
void printUsage(int argc, char** argv)
{
	DEBUG_START;
	printf("Usage:\n");
	STDERR_PRINT("%s - Unit tests for Recoverer of the polyhedron.");
	STDERR_PRINT("Usage:\n");
	STDERR_PRINT("%s [-%c <input file name>] [-%c <model name> -%c <number of "
		"contours>]\n", TEST_NAME, OPTION_FILE_NAME, OPTION_MODEL_NAME,
		OPTION_CONTOURS_NUMBER);
	STDERR_PRINT("Options:\n");
	STDERR_PRINT("\t-%c\tThe name of file with shadow contours to be "
		"processed\n", OPTION_FILE_NAME);
	STDERR_PRINT("\t-%c\tThe name of synthetic model to be tested on.\n",
		OPTION_MODEL_NAME);
	STDERR_PRINT("\t-%c\tThe number of contours to be generated from the "
		"synthetic model\n", OPTION_CONTOURS_NUMBER);
	STDERR_PRINT("Possible synthetic models are:\n");
	for (int iModel = 0; iModel < RECOVERER_TEST_MODELS_NUMBER; ++iModel)
	{
		RecovererTestModel *model = &recovererTestModels[iModel];
		STDERR_PRINT("\t%d.\"%s\"\t- %s\n", model->id, model->name,
			model->desciption);
	}
	DEBUG_END;
}

/**
 * Parses command line string to obtain options from it.
 * 
 * @param argc	Standard Linux argc
 * @param argv	Standard Linux argv
 */
CommandLineOptions* parseCommandLine(int argc, char** argv)
{
	DEBUG_START;
	CommandLineOptions* options = new CommandLineOptions();
	bool ifOptionF = false, ifOptionM = false, ifOptionN = false;
	int charCurr;
	opterr = 0;

	/*
	 * Iterate command line arguments using standard Libc function getopt.
	 * See http://www.gnu.org/software/libc/manual/html_node/Getopt.html
	 * for details.
	 */
	while ((charCurr = getopt(argc, argv, RECOVERER_OPTIONS_GETOPT_DESCRIPTION))
		!= GETOPT_FAILURE)
	{
		switch (charCurr)
		{
		case OPTION_FILE_NAME:
			options->mode = RECOVERER_REAL_TESTING;
			options->input.fileName = optarg;
			break;
		case OPTION_MODEL_NAME:
			options->mode = RECOVERER_SYNTHETIC_TESTING;
			options->input.figureName = optarg;
			break;
		case OPTION_CONTOURS_NUMBER:
			options->numContours = atoi(optarg);
			break;
		case GETOPT_QUESTION:
			switch (optopt)
			{
			case OPTION_FILE_NAME:
				STDERR_PRINT("Option \"-%c\" requires an argument - the name of 
"					"input file.", OPTION_FILE_NAME);
				printUsage();
				DEBUG_END;
				exit(EXIT_FAILURE);
				break;
			case OPTION_MODEL_NAME:
				STDERR_PRINT("Option \"-%c\" requires an argument - the name of 
"					"synthetic model to be tested.", OPTION_MODEL_NAME);
				printUsage();
				DEBUG_END;
				exit(EXIT_FAILURE);
			case OPTION_CONTOURS_NUMBER:
				STDERR_PRINT("Option \"-%c\" requires an argument - the number "
					"contour generated from original model (in synthetic "
					"testing mode)", OPTION_CONTOURS_NUMBER);
				printUsage();
				DEBUG_END;
				exit(EXIT_FAILURE);
			default:
				ASSERT(0 && "Impossible happened.");
				DEBUG_END;
				exit(EXIT_FAILURE);
			}
			break;
		default:
			ASSERT(0 && "Impossible happened.");
			DEBUG_END;
			exit(EXIT_FAILURE);
			break;
		}

		/* Check that options "-f" and "-m" are not given at the same time. */
		if (ifOptionF && ifOptionM)
		{
			STDERR_PRINT("Options \"-%s\" and \"-%c\" cannot be given"
				" simultaneously.", OPTION_FILE_NAME, OPTION_MODEL_NAME);
			printUsage();
			DEBUG_END;
			exit(EXIT_FAILURE);
		}

		/* Check that option "-n" is provided for option "-m". */
		if ((ifOptionM && !ifOptionN) || (!ifOptionM && ifOptionN))
		{
			STDERR_PRINT("Options \"-%c\" and \"-%c\" must be given"
				" simultaneously.", OPTION_MODEL_NAME, OPTION_CONTOURS_NUMBER);
			printUsage();
			DEBUG_END;
			exit(EXIT_FAILURE);
		}
	}
	DEBUG_END;
}

/**
 * The main function of the test.
 * 
 * @param argc	Standard Linux argc
 * @param argv	Standard Linux argv
 */
int main(int argc, char** argv)
{
	DEBUG_START;
	if (argc != NUM_ARGS_EXPECTED)
	{
		STDERR_PRINT("Wrong arguments provided to program.");
		printUsage();
		DEBUG_END;
		return EXIT_FAILURE;
	}

	/* TODO: Here should be a good command-line parser function. */

	PolyhedronPtr p(new Polyhedron());
	ShadeContourDataPtr SCData(new ShadeContourData(p));
	SCData->fscanDefault(argv[1]);
	RecovererPtr recoverer(new Recoverer());
	recoverer->buildNaivePolyhedron(SCData);

	DEBUG_END;
	return EXIT_SUCCESS;
}
